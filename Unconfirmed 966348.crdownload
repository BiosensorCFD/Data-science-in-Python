#!/usr/bin/env python
# coding: utf-8

# ---
# 
# _You are currently looking at **version 1.1** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-data-analysis/resources/0dhYG) course resource._
# 
# ---

# # The Python Programming Language: Functions

# In[1]:


x = 1
y = 2
x + y


# In[2]:


y


# <br>
# `add_numbers` is a function that takes two numbers and adds them together.

# In[3]:


def add_numbers(x, y):
    return x + y

add_numbers(1, 2)


# <br>
# 'add_numbers' updated to take an optional 3rd parameter. Using `print` allows printing of multiple expressions within a single cell.

# In[4]:


def add_numbers(x,y,z=None):
    if (z==None):
        return x+y
    else:
        return x+y+z

print(add_numbers(1, 2))
print(add_numbers(1, 2, 3))


# <br>
# `add_numbers` updated to take an optional flag parameter.

# In[5]:


def add_numbers(x, y, z=None, flag=False):
    if (flag):
        print('Flag is true!')
    if (z==None):
        return x + y
    else:
        return x + y + z
    
print(add_numbers(1, 2, flag=True))


# <br>
# Assign function `add_numbers` to variable `a`.

# In[6]:


def add_numbers(x,y):
    return x+y

a = add_numbers
a(1,2)


# # The Python Programming Language: Types and Sequences

# <br>
# Use `type` to return the object's type.

# In[7]:


type('This is a string')


# In[8]:


type(None)


# In[9]:


type(1)


# In[10]:


type(1.0)


# In[11]:


type(add_numbers)


# <br>
# Tuples are an immutable data structure (cannot be altered).

# In[12]:


x = (1, 'a', 2, 'b')
type(x)


# <br>
# Lists are a mutable data structure.

# In[13]:


x = [1, 'a', 2, 'b']
type(x)


# <br>
# Use `append` to append an object to a list.

# In[14]:


x.append(3.3)
print(x)


# <br>
# This is an example of how to loop through each item in the list.

# In[15]:


for item in x:
    print(item)


# <br>
# Or using the indexing operator:

# In[16]:


i=0
while( i != len(x) ):
    print(x[i])
    i = i + 1


# <br>
# Use `+` to concatenate lists.

# In[17]:


[1,2] + [3,4]


# <br>
# Use `*` to repeat lists.

# In[18]:


[1]*3


# <br>
# Use the `in` operator to check if something is inside a list.

# In[19]:


1 in [1, 2, 3]


# <br>
# Now let's look at strings. Use bracket notation to slice a string.

# In[20]:


x = 'This is a string'
print(x[0]) #first character
print(x[0:1]) #first character, but we have explicitly set the end character
print(x[0:2]) #first two characters


# <br>
# This will return the last element of the string.

# In[21]:


x[-1]


# <br>
# This will return the slice starting from the 4th element from the end and stopping before the 2nd element from the end.

# In[22]:


x[-4:-2]


# <br>
# This is a slice from the beginning of the string and stopping before the 3rd element.

# In[23]:


x[:3]


# <br>
# And this is a slice starting from the 4th element of the string and going all the way to the end.

# In[24]:


x[3:]


# In[25]:


firstname = 'Christopher'
lastname = 'Brooks'

print(firstname + ' ' + lastname)
print(firstname*3)
print('Chris' in firstname)


# <br>
# `split` returns a list of all the words in a string, or a list split on a specific character.

# In[26]:


firstname = 'Christopher Arthur Hansen Brooks'.split(' ')[0] # [0] selects the first element of the list
lastname = 'Christopher Arthur Hansen Brooks'.split(' ')[-1] # [-1] selects the last element of the list
print(firstname)
print(lastname)


# <br>
# Make sure you convert objects to strings before concatenating.

# In[27]:


'Chris' + 2


# In[ ]:


'Chris' + str(2)


# <br>
# Dictionaries associate keys with values.

# In[ ]:


x = {'Christopher Brooks': 'brooksch@umich.edu', 'Bill Gates': 'billg@microsoft.com'}
x['Christopher Brooks'] # Retrieve a value by using the indexing operator


# In[ ]:


x['Kevyn Collins-Thompson'] = None
x['Kevyn Collins-Thompson']


# <br>
# Iterate over all of the keys:

# In[28]:


for name in x:
    print(x[name])


# <br>
# Iterate over all of the values:

# In[ ]:


for email in x.values():
    print(email)


# <br>
# Iterate over all of the items in the list:

# In[ ]:


for name, email in x.items():
    print(name)
    print(email)


# <br>
# You can unpack a sequence into different variables:

# In[ ]:


x = ('Christopher', 'Brooks', 'brooksch@umich.edu')
fname, lname, email = x


# In[ ]:


fname


# In[ ]:


lname


# <br>
# Make sure the number of values you are unpacking matches the number of variables being assigned.

# In[ ]:


x = ('Christopher', 'Brooks', 'brooksch@umich.edu', 'Ann Arbor')
fname, lname, email = x


# # The Python Programming Language: More on Strings

# In[ ]:


print('Chris' + 2)


# In[29]:


print('Chris' + str(2))


# <br>
# Python has a built in method for convenient string formatting.

# In[30]:


sales_record = {
'price': 3.24,
'num_items': 4,
'person': 'Chris'}

sales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'

print(sales_statement.format(sales_record['person'],
                             sales_record['num_items'],
                             sales_record['price'],
                             sales_record['num_items']*sales_record['price']))


# # Reading and Writing CSV files

# <br>
# Let's import our datafile mpg.csv, which contains fuel economy data for 234 cars.
# 
# * mpg : miles per gallon
# * class : car classification
# * cty : city mpg
# * cyl : # of cylinders
# * displ : engine displacement in liters
# * drv : f = front-wheel drive, r = rear wheel drive, 4 = 4wd
# * fl : fuel (e = ethanol E85, d = diesel, r = regular, p = premium, c = CNG)
# * hwy : highway mpg
# * manufacturer : automobile manufacturer
# * model : model of car
# * trans : type of transmission
# * year : model year

# In[48]:


import csv

get_ipython().run_line_magic('precision', '2')

with open('mpg.csv') as csvfile:
    mpg = list(csv.DictReader(csvfile))
    
mpg[:3] # The first three dictionaries in our list.


# <br>
# `csv.Dictreader` has read in each row of our csv file as a dictionary. `len` shows that our list is comprised of 234 dictionaries.

# In[49]:


len(mpg)


# <br>
# `keys` gives us the column names of our csv.

# In[50]:


mpg[0].keys()


# <br>
# This is how to find the average cty fuel economy across all cars. All values in the dictionaries are strings, so we need to convert to float.

# In[ ]:


sum(float(d['cty']) for d in mpg) / len(mpg)


# <br>
# Similarly this is how to find the average hwy fuel economy across all cars.

# In[ ]:


sum(float(d['hwy']) for d in mpg) / len(mpg)


# <br>
# Use `set` to return the unique values for the number of cylinders the cars in our dataset have.

# In[ ]:


cylinders = set(d['cyl'] for d in mpg)
cylinders


# <br>
# Here's a more complex example where we are grouping the cars by number of cylinder, and finding the average cty mpg for each group.

# In[ ]:


CtyMpgByCyl = []

for c in cylinders: # iterate over all the cylinder levels
    summpg = 0
    cyltypecount = 0
    for d in mpg: # iterate over all dictionaries
        if d['cyl'] == c: # if the cylinder level type matches,
            summpg += float(d['cty']) # add the cty mpg
            cyltypecount += 1 # increment the count
    CtyMpgByCyl.append((c, summpg / cyltypecount)) # append the tuple ('cylinder', 'avg mpg')

CtyMpgByCyl.sort(key=lambda x: x[0])
CtyMpgByCyl


# <br>
# Use `set` to return the unique values for the class types in our dataset.

# In[ ]:


vehicleclass = set(d['class'] for d in mpg) # what are the class types
vehicleclass


# <br>
# And here's an example of how to find the average hwy mpg for each class of vehicle in our dataset.

# In[ ]:


HwyMpgByClass = []

for t in vehicleclass: # iterate over all the vehicle classes
    summpg = 0
    vclasscount = 0
    for d in mpg: # iterate over all dictionaries
        if d['class'] == t: # if the cylinder amount type matches,
            summpg += float(d['hwy']) # add the hwy mpg
            vclasscount += 1 # increment the count
    HwyMpgByClass.append((t, summpg / vclasscount)) # append the tuple ('class', 'avg mpg')

HwyMpgByClass.sort(key=lambda x: x[1])
HwyMpgByClass


# # The Python Programming Language: Dates and Times

# In[32]:


import datetime as dt
import time as tm


# <br>
# `time` returns the current time in seconds since the Epoch. (January 1st, 1970)

# In[33]:


tm.time()


# <br>
# Convert the timestamp to datetime.

# In[34]:


dtnow = dt.datetime.fromtimestamp(tm.time())
dtnow


# <br>
# Handy datetime attributes:

# In[35]:


dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second # get year, month, day, etc.from a datetime


# <br>
# `timedelta` is a duration expressing the difference between two dates.

# In[36]:


delta = dt.timedelta(days = 100) # create a timedelta of 100 days
delta


# <br>
# `date.today` returns the current local date.

# In[37]:


today = dt.date.today()


# In[38]:


today - delta # the date 100 days ago


# In[39]:


today > today-delta # compare dates


# # The Python Programming Language: Objects and map()

# <br>
# An example of a class in python:

# In[40]:


class Person:
    department = 'School of Information' #a class variable

    def set_name(self, new_name): #a method
        self.name = new_name
    def set_location(self, new_location):
        self.location = new_location


# In[41]:


person = Person()
person.set_name('Christopher Brooks')
person.set_location('Ann Arbor, MI, USA')
print('{} live in {} and works in the department {}'.format(person.name, person.location, person.department))


# <br>
# Here's an example of mapping the `min` function between two lists.

# In[42]:


store1 = [10.00, 11.00, 12.34, 2.34]
store2 = [9.00, 11.10, 12.34, 2.01]
cheapest = map(min, store1, store2)
cheapest


# <br>
# Now let's iterate through the map object to see the values.

# In[43]:


for item in cheapest:
    print(item)


# # The Python Programming Language: Lambda and List Comprehensions

# <br>
# Here's an example of lambda that takes in three parameters and adds the first two.

# In[44]:


my_function = lambda a, b, c : a + b


# In[45]:


my_function(1, 2, 3)


# <br>
# Let's iterate from 0 to 999 and return the even numbers.

# In[46]:


my_list = []
for number in range(0, 1000):
    if number % 2 == 0:
        my_list.append(number)
my_list


# <br>
# Now the same thing but with list comprehension.

# In[47]:


my_list = [number for number in range(0,1000) if number % 2 == 0]
my_list

